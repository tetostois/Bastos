// Script de debug pour le CandidateDashboard
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç [DEBUG] D√©but du debug CandidateDashboard');

// 1. V√©rifier les donn√©es utilisateur dans localStorage
const userData = localStorage.getItem('user');
const token = localStorage.getItem('token');

console.log('üìä [DEBUG] Donn√©es localStorage:', {
    user: userData ? JSON.parse(userData) : null,
    token: token
});

// 2. V√©rifier si l'utilisateur a les bonnes donn√©es
if (userData) {
    const user = JSON.parse(userData);
    console.log('üë§ [DEBUG] Utilisateur actuel:', {
        hasPaid: user.hasPaid,
        selectedCertification: user.selectedCertification,
        currentModule: user.currentModule,
        completedModules: user.completedModules,
        unlockedModules: user.unlockedModules
    });

    // 3. Tester la logique d'affichage
    const shouldShowCertificationSelector = !user.selectedCertification;
    const shouldShowPayment = !user.hasPaid;
    const shouldShowModules = user.hasPaid && user.selectedCertification;

    console.log('üéØ [DEBUG] Logique d'affichage:', {
        shouldShowCertificationSelector,
        shouldShowPayment,
        shouldShowModules,
        currentCertification: user.selectedCertification ? 'Oui' : 'Non'
    });

    // 4. Recommandations
    if (shouldShowCertificationSelector) {
        console.log('‚ö†Ô∏è [DEBUG] L\'utilisateur devrait voir le s√©lecteur de certification');
    }
    if (shouldShowPayment) {
        console.log('‚ö†Ô∏è [DEBUG] L\'utilisateur devrait voir l\'interface de paiement');
    }
    if (shouldShowModules) {
        console.log('‚úÖ [DEBUG] L\'utilisateur devrait voir les modules directement');
    }
} else {
    console.log('‚ùå [DEBUG] Aucun utilisateur trouv√© dans localStorage');
}

// 5. Fonction pour cr√©er un utilisateur de test
window.createTestUser = function() {
    const testUser = {
        id: "test-user-123",
        firstName: "Test",
        lastName: "Candidat",
        email: "test@example.com",
        phone: "123456789",
        role: "candidate",
        isActive: true,
        address: "Test Address",
        birthDate: "1990-01-01",
        birthPlace: "Test City",
        city: "Test City",
        country: "Test Country",
        profession: "Test Profession",
        createdAt: new Date().toISOString(),
        hasPaid: true,
        selectedCertification: "initiation-pratique",
        currentModule: "leadership-init",
        completedModules: [],
        unlockedModules: ["leadership-init"],
        examTaken: false,
        score: undefined,
        certificate: undefined
    };

    localStorage.setItem('user', JSON.stringify(testUser));
    localStorage.setItem('token', 'test-token-123');
    
    console.log('‚úÖ [DEBUG] Utilisateur de test cr√©√©. Rechargez la page pour voir les changements.');
    return testUser;
};

// 6. Fonction pour effacer les donn√©es
window.clearUserData = function() {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    console.log('üóëÔ∏è [DEBUG] Donn√©es utilisateur effac√©es');
};

console.log('üõ†Ô∏è [DEBUG] Fonctions disponibles:');
console.log('- createTestUser() : Cr√©er un utilisateur de test avec progression');
console.log('- clearUserData() : Effacer toutes les donn√©es utilisateur');

