// Script de diagnostic pour comprendre le probl√®me de progression utilisateur
// √Ä ex√©cuter dans la console du navigateur sur votre application

console.log('üîç DIAGNOSTIC DE PROGRESSION UTILISATEUR');
console.log('=====================================');

// 1. V√©rifier les donn√©es dans localStorage
console.log('\n1Ô∏è‚É£ DONN√âES DANS LOCALSTORAGE:');
const userData = localStorage.getItem('user');
const tokenData = localStorage.getItem('token');

console.log('Token:', tokenData ? '‚úÖ Pr√©sent' : '‚ùå Absent');
console.log('User data:', userData ? '‚úÖ Pr√©sent' : '‚ùå Absent');

if (userData) {
  try {
    const user = JSON.parse(userData);
    console.log('Donn√©es utilisateur:');
    console.log('  - ID:', user.id);
    console.log('  - Nom:', user.firstName, user.lastName);
    console.log('  - Email:', user.email);
    console.log('  - Certification s√©lectionn√©e:', user.selectedCertification || 'AUCUNE');
    console.log('  - A pay√©:', user.hasPaid ? '‚úÖ OUI' : '‚ùå NON');
    console.log('  - Module actuel:', user.currentModule || 'AUCUN');
    console.log('  - Modules compl√©t√©s:', user.completedModules || []);
    console.log('  - Modules d√©verrouill√©s:', user.unlockedModules || []);
  } catch (error) {
    console.error('‚ùå Erreur parsing user data:', error);
  }
}

// 2. Simuler l'appel API /auth/me
console.log('\n2Ô∏è‚É£ SIMULATION APPEL API /auth/me:');
if (tokenData) {
  fetch('/api/auth/me', {
    headers: {
      'Authorization': `Bearer ${tokenData}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    console.log('Status API:', response.status);
    if (response.ok) {
      return response.json();
    } else {
      throw new Error(`API Error: ${response.status}`);
    }
  })
  .then(apiUser => {
    console.log('Donn√©es API:');
    console.log('  - Certification s√©lectionn√©e:', apiUser.selected_certification || 'AUCUNE');
    console.log('  - A pay√©:', apiUser.has_paid ? '‚úÖ OUI' : '‚ùå NON');
    console.log('  - Module actuel:', apiUser.current_module || 'AUCUN');
    
    // 3. Comparer les donn√©es
    console.log('\n3Ô∏è‚É£ COMPARAISON DES DONN√âES:');
    if (userData) {
      const localUser = JSON.parse(userData);
      
      const certificationMatch = localUser.selectedCertification === apiUser.selected_certification;
      const paymentMatch = localUser.hasPaid === apiUser.has_paid;
      const moduleMatch = localUser.currentModule === apiUser.current_module;
      
      console.log('Certification:', certificationMatch ? '‚úÖ Identique' : '‚ùå Diff√©rent');
      console.log('Paiement:', paymentMatch ? '‚úÖ Identique' : '‚ùå Diff√©rent');
      console.log('Module:', moduleMatch ? '‚úÖ Identique' : '‚ùå Diff√©rent');
      
      if (!certificationMatch || !paymentMatch || !moduleMatch) {
        console.log('\nüö® PROBL√àME D√âTECT√â:');
        console.log('Les donn√©es locales et API ne correspondent pas !');
        console.log('Cela explique pourquoi l\'utilisateur revoit le s√©lecteur de certification.');
      }
    }
  })
  .catch(error => {
    console.error('‚ùå Erreur API:', error);
    console.log('üí° V√©rifiez que votre serveur Laravel est d√©marr√© sur le port 8000');
  });
} else {
  console.log('‚ùå Pas de token, impossible de tester l\'API');
}

// 4. Logique d'affichage attendue
console.log('\n4Ô∏è‚É£ LOGIQUE D\'AFFICHAGE ATTENDUE:');
if (userData) {
  const user = JSON.parse(userData);
  
  if (!user.selectedCertification) {
    console.log('üìã L\'utilisateur devrait voir: S√âLECTEUR DE CERTIFICATION');
  } else if (!user.hasPaid) {
    console.log('üí≥ L\'utilisateur devrait voir: FORMULAIRE DE PAIEMENT');
  } else {
    console.log('üìö L\'utilisateur devrait voir: MODULES DE CERTIFICATION');
  }
}

// 5. Actions de test
console.log('\n5Ô∏è‚É£ ACTIONS DE TEST DISPONIBLES:');
console.log('Ex√©cutez ces fonctions pour tester:');
console.log('  - setTestUser() : Cr√©er un utilisateur de test');
console.log('  - setCertification() : Ajouter une certification');
console.log('  - setPayment() : Marquer comme pay√©');
console.log('  - clearData() : Effacer toutes les donn√©es');

// Fonctions de test
window.setTestUser = function() {
  const testUser = {
    id: '1',
    firstName: 'Test',
    lastName: 'User',
    email: 'test@example.com',
    role: 'candidate',
    hasPaid: false,
    selectedCertification: null,
    currentModule: null,
    completedModules: [],
    unlockedModules: [],
    examTaken: false
  };
  localStorage.setItem('user', JSON.stringify(testUser));
  console.log('‚úÖ Utilisateur de test cr√©√©');
  location.reload();
};

window.setCertification = function() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  user.selectedCertification = 'certification_initiation_pratique_generale';
  localStorage.setItem('user', JSON.stringify(user));
  console.log('‚úÖ Certification ajout√©e');
  location.reload();
};

window.setPayment = function() {
  const user = JSON.parse(localStorage.getItem('user') || '{}');
  user.hasPaid = true;
  user.examStartDate = new Date().toISOString();
  localStorage.setItem('user', JSON.stringify(user));
  console.log('‚úÖ Paiement marqu√© comme effectu√©');
  location.reload();
};

window.clearData = function() {
  localStorage.removeItem('user');
  localStorage.removeItem('token');
  console.log('‚úÖ Donn√©es effac√©es');
  location.reload();
};

console.log('\nüéØ DIAGNOSTIC TERMIN√â');
console.log('Ex√©cutez les fonctions de test pour reproduire le probl√®me !');
